# -*- coding: utf-8 -*-
"""google_hackathon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CRi63Bf3qkbSBgwGz05JievF91ruwikC
"""

import pandas as pd;
df = pd.DataFrame(pd.read_excel('Specialist.xlsx'))

y=df['Disease']
df=df.drop(['Disease'],axis=1)

df.describe()
df=df[df.columns[df.sum()>0]]
print(df.sum())
df.info()

def remove_collinear_features(x, threshold):
    '''
    Objective:
        Remove collinear features in a dataframe with a correlation coefficient
        greater than the threshold. Removing collinear features can help a model
        to generalize and improves the interpretability of the model.

    Inputs:
        x: features dataframe
        threshold: features with correlations greater than this value are removed

    Output:
        dataframe that contains only the non-highly-collinear features
    '''

    # Calculate the correlation matrix
    corr_matrix = x.corr()
    iters = range(len(corr_matrix.columns) - 1)
    drop_cols = []
    for i in iters:
        for j in range(i+1):
            item = corr_matrix.iloc[j:(j+1), (i+1):(i+2)]
            col = item.columns
            row = item.index
            val = abs(item.values)

            # If correlation exceeds the threshold
            if val >= threshold:
                # Print the correlated features and the correlation value
                #print(col.values[0], "|", row.values[0], "|", round(val[0][0], 2))
                drop_cols.append(col.values[0])

    # Drop one of each pair of correlated columns
    drops = set(drop_cols)
    x = x.drop(columns=drops)
    print('Removed Columns {}'.format(drops))
    return x

print("Removing Correlated Features")
# Pass DataFrame and Threshold value
df=remove_collinear_features(df,0.80)

df['skin']= df['itching'] | df[' skin_rash'] | df[' nodal_skin_eruptions'] | df[' skin_peeling'] | df[' pus_filled_pimples']
df['shivering']=df[' shivering']|df[' chills']
df['low appetite/weight loss']=df[' loss_of_appetite'] | df[' weight_loss']
df['urine issues']=df[' spotting_ urination']|df[' bladder_discomfort']

df1=df[['skin',' continuous_sneezing', ' blurred_and_distorted_vision',' cramps', ' pain_during_bowel_movements','shivering','low appetite/weight loss','urine issues',
       ' depression',' stomach_pain', ' acidity',' vomiting',' chest_pain',' yellowish_skin',' passage_of_gases',' indigestion',' high_fever',' irregular_sugar_level',' sunken_eyes',
        ' diarrhoea',' breathlessness',' headache',' nausea',' stiff_neck',' back_pain',' muscle_pain',' neck_pain',' joint_pain',
        ' muscle_weakness',' knee_pain'
        ,' lack_of_concentration',' anxiety',
        ' mild_fever',' cough',' obesity',' constipation',' fast_heart_rate']].copy()

df1=pd.DataFrame(df1)

df1['disease']=y.copy()
print(y)
df1['disease'] = df1['disease'].astype('category')
df1['disease'] = df1['disease'].cat.codes
print(y)

from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split


# get the locations
X = df1.iloc[:, :-1]
y = df1.iloc[:, -1]

# split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.05, random_state=0)
# print(y_train)

model = XGBClassifier()

# # fit the model with the training data
model.fit(X_train,y_train)


# predict the target on the train dataset
predict_train = model.predict(X_train)
print('\nTarget on train data',predict_train)

# Accuray Score on train dataset
accuracy_train = accuracy_score(y_train,predict_train)
print('\naccuracy_score on train dataset : ', accuracy_train)

# predict the target on the test dataset
predict_test = model.predict(X_test)
print('\nTarget on test data',predict_test)

# Accuracy Score on test dataset
accuracy_test = accuracy_score(y_test,predict_test)
print('\naccuracy_score on test dataset : ', accuracy_test)

print(type(X_train))

import joblib
joblib.dump(model, 'xgboost_model.joblib')

# df1.info()
import numpy as np
reg = joblib.load('xgboost_model.joblib')
a=np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

a=pd.DataFrame(a,columns=['skin',' continuous_sneezing', ' blurred_and_distorted_vision',' cramps', ' pain_during_bowel_movements','shivering','low appetite/weight loss','urine issues',' depression',' stomach_pain', ' acidity',' vomiting',' chest_pain',' yellowish_skin',' passage_of_gases',' indigestion',' high_fever',' irregular_sugar_level',' sunken_eyes',' diarrhoea',' breathlessness',' headache',' nausea',' stiff_neck',' back_pain',' muscle_pain',' neck_pain',' joint_pain',' muscle_weakness',' knee_pain',' lack_of_concentration',' anxiety',' mild_fever',' cough',' obesity',' constipation',' fast_heart_rate'])
# print(a)
predictions = reg.predict(a)
print(predictions)

t=y.copy();
t=t.astype('category').cat.codes
k=[]
for i in range(0,len(y)):
  k.append({y[i]:t[i]})


def unique(list1):

     unique_list = []
     for x in list1:
        # check if exists in unique_list or not
        if x not in unique_list:
            unique_list.append(x)
     for x in unique_list:
        print (x)
unique(k)
# print(k)